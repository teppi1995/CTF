import struct

def p(a):
    return struct.pack("<I", a)

def u(a):
    return struct.unpack("<I", a)[0]

def enc_xor(a, b):
    return ''.join([chr(ord(c1) ^ ord(c2)) for (c1, c2) in zip(a, b)])

def unBitshiftRightXor(x, shift):
    i = 1
    y = x
    while i * shift < 32:
        z = y >> shift
        y = x ^ z
        i += 1
    return y

def unBitshiftLeftXor(x, shift, mask):
    i = 1
    y = x
    while i * shift < 32:
        z = y << shift
        y = x ^ (z & mask)
        i += 1
    return y

def untemper(x):
    x = unBitshiftRightXor(x, 18)
    x = unBitshiftLeftXor(x, 15, 0xefc60000)
    x = unBitshiftLeftXor(x, 7, 0x9d2c5680)
    x = unBitshiftRightXor(x, 11)
    return x


def main():
    f1 = open("encrypt.cpp").read()  
    f2 = open("encrypt.enc").read()[4:]  
    f3 = open("flag.enc").read()[4:]  
  
    print("[+] len(f1)=" + len(f1) + "block=" + len(f1)/4)
    print("[+] len(f2)=" + len(f2) + "block=" + len(f2)/4)
    print("[+] len(f3)=" + len(f3) + "block=" + len(f3)/4)

    

    
if __name__ == "__main__":
    main()


